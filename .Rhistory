partition.known <- multisplit(X, folds=5, overdisps=true.overdisps)
rownames(X) <- 1:NROW(X)
colnames(X) <- 1:NCOL(X)
fit <- sctransform::vst(t(X), verbosity=0, min_cells=0)
overdisps.hat <- fit$model_pars_fit[,1]
if (length(overdisps.hat) != NCOL(X)) {
temp <- overdisps.hat
overdisps.hat<- rep(Inf, NCOL(X))
overdisps.hat[rownames(temp)] <- temp
}
partition.hat <- multisplit(X, folds=5, overdisps=overdisps.hat)
### POISSON
fullRes <- matrix(NA, nrow=folds, ncol=length(clustTry))
for (fold in 1:folds) {
testDat <- partition.pois[[fold]]
trainDat <- X - testDat
for (j in 1:length(clustTry)) {
clusters.train <- kmeans(log(trainDat+1), centers=clustTry[j], nstart=10)$cluster
fullRes[fold,j] <- cluster.sse.log(trainDat, testDat, clusters.train, clusters.train, 1-1/folds, 1/folds)
}
}
poisMSEs[trial, ] <- colMeans(fullRes)
### KNOWN
fullRes <- matrix(NA, nrow=folds, ncol=length(clustTry))
for (fold in 1:folds) {
testDat <- partition.known[[fold]]
trainDat <- X - testDat
for (j in 1:length(clustTry)) {
clusters.train <- kmeans(log(trainDat+1), centers=clustTry[j], nstart=10)$cluster
fullRes[fold,j] <- cluster.sse.log(trainDat, testDat, clusters.train, clusters.train, 1-1/folds, 1/folds)
}
}
knownMSEs[trial, ] <- colMeans(fullRes)
### EST
fullRes <- matrix(NA, nrow=folds, ncol=length(clustTry))
for (fold in 1:folds) {
testDat <- partition.hat[[fold]]
trainDat <- X - testDat
for (j in 1:length(clustTry)) {
clusters.train <- kmeans(log(trainDat+1), centers=clustTry[j], nstart=10)$cluster
fullRes[fold,j] <- cluster.sse.log(trainDat, testDat, clusters.train, clusters.train, 1-1/folds, 1/folds)
}
}
sctMSEsMSEs[trial, ] <- colMeans(fullRes)
}
overdisp <- 3
K <- 3
clustTry = 2:10
B1 = 1.5
n=400
p=80
ntrials <- 50
folds=5
poisMSEs <- matrix(NA, nrow=ntrials, ncol=length(clustTry))
knownMSEs <- matrix(NA, nrow=ntrials, ncol=length(clustTry))
sctMSEs <- matrix(NA, nrow=ntrials, ncol=length(clustTry))
cluster.sse.log <- function(trainDat, testDat, clusters.train, clusters.test,
eps.train, eps.test) {
totSS <- 0
for (lab in unique(clusters.train)) {
if (sum(clusters.test==lab) > 1 &sum(clusters.train==lab) > 1 ) {
clustdat.test <- testDat[clusters.test==lab,]
clustdat.train <- trainDat[clusters.train==lab,]
#### This is done on the scale of the original data X.
### BC of sparsity
colmeansTrain <- apply(clustdat.train, 2, mean)
pred.means <- 1/eps.train*  colmeansTrain
ss <- apply(1/eps.test*clustdat.test, 1,  function(u) sum((log(u+1)-log(pred.means+1))^2))
totSS <- totSS+sum(ss)
}
}
return(totSS)
}
for (trial in 1:ntrials) {
print(trial)
set.seed(trial)
B0s <- rnorm(p)
clusters <- sample(1:K, size=n, replace=TRUE)
logLambda <- matrix(B0s, nrow=n, ncol=p, byrow = TRUE)
c <- 1
if (K > 1) {
for (clust in 1:(K-1)) {
logLambda[clusters==clust,c:(c+p/20-1)] <-  logLambda[clusters==clust,c:(c+p/20-1)]+B1
c <- c+p/20
}
}
Lambda <- exp(logLambda)
Lambda_bar_js <- colMeans(Lambda)
true.overdisps <- sapply(Lambda_bar_js, function(u) u/overdisp)
X <- sapply(1:p, function(u) rnbinom(length(Lambda[,u]), mu=Lambda[,u], size= true.overdisps[u]))
partition.pois <- multisplit(X, folds=5)
partition.known <- multisplit(X, folds=5, overdisps=true.overdisps)
rownames(X) <- 1:NROW(X)
colnames(X) <- 1:NCOL(X)
fit <- sctransform::vst(t(X), verbosity=0, min_cells=0)
overdisps.hat <- fit$model_pars_fit[,1]
if (length(overdisps.hat) != NCOL(X)) {
temp <- overdisps.hat
overdisps.hat<- rep(Inf, NCOL(X))
overdisps.hat[rownames(temp)] <- temp
}
partition.hat <- multisplit(X, folds=5, overdisps=overdisps.hat)
### POISSON
fullRes <- matrix(NA, nrow=folds, ncol=length(clustTry))
for (fold in 1:folds) {
testDat <- partition.pois[[fold]]
trainDat <- X - testDat
for (j in 1:length(clustTry)) {
clusters.train <- kmeans(log(trainDat+1), centers=clustTry[j], nstart=10)$cluster
fullRes[fold,j] <- cluster.sse.log(trainDat, testDat, clusters.train, clusters.train, 1-1/folds, 1/folds)
}
}
poisMSEs[trial, ] <- colMeans(fullRes)
### KNOWN
fullRes <- matrix(NA, nrow=folds, ncol=length(clustTry))
for (fold in 1:folds) {
testDat <- partition.known[[fold]]
trainDat <- X - testDat
for (j in 1:length(clustTry)) {
clusters.train <- kmeans(log(trainDat+1), centers=clustTry[j], nstart=10)$cluster
fullRes[fold,j] <- cluster.sse.log(trainDat, testDat, clusters.train, clusters.train, 1-1/folds, 1/folds)
}
}
knownMSEs[trial, ] <- colMeans(fullRes)
### EST
fullRes <- matrix(NA, nrow=folds, ncol=length(clustTry))
for (fold in 1:folds) {
testDat <- partition.hat[[fold]]
trainDat <- X - testDat
for (j in 1:length(clustTry)) {
clusters.train <- kmeans(log(trainDat+1), centers=clustTry[j], nstart=10)$cluster
fullRes[fold,j] <- cluster.sse.log(trainDat, testDat, clusters.train, clusters.train, 1-1/folds, 1/folds)
}
}
sctMSEs[trial, ] <- colMeans(fullRes)
}
logMeanPois <- log(colMeans(poisMSEs))
logMeanKnown <- log(colMeans(knownMSEs))
logMeanSCT <- log(colMeans(sctMSEs))
plot(clustTry, (logMeanPois-min(logMeanPois))/(max(logMeanPois)-min(logMeanPois)), type='b', col="red")
points(clustTry,  (logMeanKnown-min(logMeanKnown))/(max(logMeanKnown)-min(logMeanKnown)), type='b', col="green")
points(clustTry,  (logMeanSCT-min(logMeanSCT))/(max(logMeanSCT)-min(logMeanSCT)), type='b', col="blue")
plot(overdisps.hat, overdisp)
plot(overdisps.hat, true.overdisps)
cor(overdisps.hat, true.overdisps)
devtools::load_all(0)
devtools::load_all()
devtools::load_all()
set.seed(1)
n <- 1000
p <- 200
X <- matrix(rpois(n*p, lambda=5), nrow=n)
clusters.full <- kmeans(log(X+1), centers=2)$cluster
results.naive <- t(apply(X, 2, function(u) summary(glm(u~as.factor(clusters.full), family="poisson"))$coefficients[2,]))
head(results.naive)
ggplot(data=NULL, aes(sample=results.naive[,4]))+geom_qq(distribution="qunif")+geom_abline(col="red")
install.packages("tidyverse")
library(countsplit)
library(ggplot2)
library(patchwork)
set.seed(1)
n <- 1000
p <- 200
X <- matrix(rpois(n*p, lambda=5), nrow=n)
clusters.full <- kmeans(log(X+1), centers=2)$cluster
results.naive <- t(apply(X, 2, function(u) summary(glm(u~as.factor(clusters.full), family="poisson"))$coefficients[2,]))
head(results.naive)
ggplot(data=NULL, aes(sample=results.naive[,4]))+geom_qq(distribution="qunif")+geom_abline(col="red")
results.naive[,4]
ggplot(data=NULL, aes(sample=results.naive[,4]))+geom_qq(distribution="qunif")+geom_abline(col="red")
library(ggplot2)
ggplot(data=NULL, aes(sample=results.naive[,4]))+geom_qq(distribution="qunif")+geom_abline(col="red")
?geom_qq
ggplot(data=NULL, aes(sample=results.naive[,4]))+geom_qq(distribution=stats::qunif)+geom_abline(col="red")
ggplot(data=NULL, aes(sample=results.naive[,4]))+geom_qq(distribution=stats::qunif)+geom_abline(col="red")
set.seed(2)
split <- countsplit(X, folds=2)
multisplit
rep(1/2,2)
devtools::load_all()
devtools::load_all()
set.seed(2)
split <- countsplit(X, folds=2)
names(split)
Xtrain <- split[[1]]
Xtest <- split[[2]]
set.seed(2)
split <- countsplit(X, folds=2, epsilon=c(0.5,0.5))
Xtrain <- split[[1]]
Xtest <- split[[2]]
clusters.train <- kmeans(log(Xtrain+1), centers=2)$cluster
results.countsplit <- t(apply(Xtest, 2, function(u) summary(glm(u~as.factor(clusters.train), family="poisson"))$coefficients[2,]))
head(results.countsplit)
ggplot(data=NULL, aes(sample=results.countsplit[,4]))+geom_qq(distribution="qunif")+geom_abline(col="red")
ggplot(data=NULL, aes(sample=results.countsplit[,4]))+geom_qq(distribution=stats::qunif)+geom_abline(col="red")
split <- countsplit(X, folds=2)
Xtrain <- split[[1]]
Xtest <- split[[2]]
split <- countsplit(X)
Xtrain <- split[[1]]
Xtest <- split[[2]]
clusters.full <- kmeans(log(X+1), centers=2)$cluster
table(clusters.true, clusters.full)
clusters.true
set.seed(1)
n <- 1000
p <- 200
clusters.true <- rbinom(n, size=1, prob=0.5)
Lambda <- matrix(5, nrow=n, ncol=p)
Lambda[clusters.true==1, 1:10] <- 10
X <-apply(Lambda,1:2,rpois,n=1)
split <- countsplit(X)
Xtrain <- split[[1]]
Xtest <- split[[2]]
clusters.full <- kmeans(log(X+1), centers=2)$cluster
table(clusters.true, clusters.full)
clusters.train <- kmeans(log(Xtrain+1), centers=2)$cluster
table(clusters.true, clusters.train)
coeffs.X <- t(apply(X, 2, function(u) summary(glm(u~as.factor(clusters.true), family="poisson"))$coefficients[,1]))
coeffs.Xtest <- t(apply(Xtest, 2, function(u) summary(glm(u~as.factor(clusters.true), family="poisson"))$coefficients[,1]))
differentially_expressed = as.factor(c(rep(1,10), rep(0,190)))
p1 <- ggplot(data=NULL, aes(x=coeffs.X[,1], y=coeffs.Xtest[,1], col=differentially_expressed))+
geom_point()+
geom_abline(intercept= log(0.5), slope=1, col="red")+
geom_abline(intercept= 0, slope=1, col="red", lty=2)+
coord_fixed()+xlim(0,2)+ylim(0,2)+
xlab("Intercepts from X")+ ylab("Intercepts from Xtest")+
ggtitle("Intercepts")+theme_bw()
p2 <- ggplot(data=NULL, aes(x=coeffs.X[,2], y=coeffs.Xtest[,2], col=differentially_expressed))+
geom_point()+
geom_abline(intercept=0, slope=1, col="red")+
coord_fixed()+xlim(-0.15,1)+ylim(-0.15,1)+
xlab("Slopes from X")+ ylab("Slopes from Xtest")+
ggtitle("Slopes")+theme_bw()
p1 + p2 + plot_layout(guides="collect")
coeffs.ideal <- t(apply(X, 2, function(u) summary(glm(u~as.factor(clusters.true), family="poisson"))$coefficients[,1]))
coeffs.countsplit <- t(apply(Xtest, 2, function(u) summary(glm(u~as.factor(clusters.train==1), family="poisson"))$coefficients[,1]))
p1 <- ggplot(data=NULL, aes(x=coeffs.ideal[,1], y=coeffs.countsplit[,1], col=differentially_expressed))+
geom_point()+
geom_abline(intercept= log(0.5), slope=1, col="red")+
geom_abline(intercept= 0, slope=1, col="red", lty=2)+
coord_fixed()+xlim(0,2)+ylim(0,2)+
xlab("Intercepts from ideal method")+ ylab("Intercepts from count splitting")+
ggtitle("Intercepts")
p2 <- ggplot(data=NULL, aes(x=coeffs.ideal[,2], y=coeffs.countsplit[,2], col=differentially_expressed))+
geom_point()+
geom_abline(intercept=0, slope=1, col="red")+
coord_fixed()+xlim(-0.15,1)+ylim(-0.15,1)+
xlab("Slopes from ideal method")+ ylab("Slopes from count splitting")+
ggtitle("Slopes")
p1 + p2 + plot_layout(guides="collect") & theme_bw()
set.seed(1)
n <- 1000
p <- 200
X <- matrix(rnbinom(n*p, mean=5, overdisp=5), nrow=n)
?rnbinom
set.seed(1)
n <- 1000
p <- 200
X <- matrix(rnbinom(n*p, mu=5, size=5), nrow=n)
## Sanity check on parameterization
mean(as.numeric(X))
var(as.numeric(X))
5+5^2/5
set.seed(1)
n <- 1000
p <- 200
X <- matrix(rnbinom(n*p, mu=5, size=5), nrow=n)
## Sanity check on parameterization
mean(as.numeric(X))
var(as.numeric(X))
5+5^2/5
clusters.full <- kmeans(log(X+1), centers=2)$cluster
results.naive <- t(apply(X, 2, function(u) summary(glm(u~as.factor(clusters.full), family="poisson"))$coefficients[2,]))
ggplot(data=NULL, aes(sample=results.naive[,4]))+geom_qq(distribution=stats::qunif)+geom_abline(col="red")
set.seed(2)
split <- countsplit(X, folds=2, epsilon=c(0.5,0.5))
Xtrain <- split[[1]]
Xtest <- split[[2]]
clusters.train <- kmeans(log(Xtrain+1), centers=2)$cluster
results.countsplit <- t(apply(Xtest, 2, function(u) summary(glm(u~as.factor(clusters.train), family="poisson"))$coefficients[2,]))
ggplot(data=NULL)+
geom_qq(aes(sample=results.naive[,4]), col="Naive method")+
distribution=stats::qunif)+
set.seed(2)
split <- countsplit(X, folds=2, epsilon=c(0.5,0.5))
Xtrain <- split[[1]]
Xtest <- split[[2]]
clusters.train <- kmeans(log(Xtrain+1), centers=2)$cluster
results.countsplit <- t(apply(Xtest, 2, function(u) summary(glm(u~as.factor(clusters.train), family="poisson"))$coefficients[2,]))
ggplot(data=NULL)+
geom_qq(aes(sample=results.naive[,4], col="Naive method"),
distribution=stats::qunif)+
geom_qq(aes(sample=results.countsplit[,4], col="Poisson count splitting"), distribution=stats::qunif)+
geom_abline(col="red")
sapply(1:p, function(u) cor(Xtrain[,u], Xtest[,u]))
hist(sapply(1:p, function(u) cor(Xtrain[,u], Xtest[,u])))
cors <- sapply(1:p, function(u) cor(Xtrain[,u], Xtest[,u]))
hist(cors, xlim=c(0,1))
set.seed(1)
n <- 1000
p <- 200
X <- matrix(rpois(n*p, lambda=5), nrow=n)
clusters.full <- kmeans(log(X+1), centers=2)$cluster
results.naive <- t(apply(X, 2, function(u) summary(glm(u~as.factor(clusters.full), family="poisson"))$coefficients[2,]))
head(results.naive)
ggplot(data=NULL, aes(sample=results.naive[,4]))+geom_qq(distribution=stats::qunif)+geom_abline(col="red")
set.seed(2)
split <- countsplit(X, folds=2, epsilon=c(0.5,0.5))
Xtrain <- split[[1]]
Xtest <- split[[2]]
clusters.train <- kmeans(log(Xtrain+1), centers=2)$cluster
results.countsplit <- t(apply(Xtest, 2, function(u) summary(glm(u~as.factor(clusters.train), family="poisson"))$coefficients[2,]))
head(results.countsplit)
ggplot(data=NULL, aes(sample=results.countsplit[,4]))+geom_qq(distribution=stats::qunif)+geom_abline(col="red")
cors <- sapply(1:p, function(u) cor(Xtrain[,u], Xtest[,u]))
hist(cors, xlim=c(0,1))
cors <- sapply(1:p, function(u) cor(Xtrain[,u], Xtest[,u]))
hist(cors, xlim=c(-1,1))
cors <- sapply(1:p, function(u) cor(Xtrain[,u], Xtest[,u]))
hist(cors, xlim=c(-1,1))
set.seed(2)
splitNB <- countsplit(X, folds=2, epsilon=c(0.5,0.5), overdisps=rep(5,p))
Xtrain <- split[[1]]
Xtest <- split[[2]]
clusters.train <- kmeans(log(Xtrain+1), centers=2)$cluster
results.countsplit.NB <- t(apply(Xtest, 2, function(u) summary(glm(u~as.factor(clusters.train), family="poisson"))$coefficients[2,]))
ggplot(data=NULL)+
geom_qq(aes(sample=results.naive[,4], col="Naive method"),
distribution=stats::qunif)+
geom_qq(aes(sample=results.countsplit[,4], col="Poisson count splitting"), distribution=stats::qunif)+
geom_qq(aes(sample=results.countsplit.NB[,4], col="Ideal NB count splitting"), distribution=stats::qunif)+
geom_abline(col="red")
set.seed(1)
n <- 1000
p <- 200
X <- matrix(rnbinom(n*p, mu=5, size=5), nrow=n)
## Sanity check on parameterization
mean(as.numeric(X))
var(as.numeric(X))
5+5^2/5
clusters.full <- kmeans(log(X+1), centers=2)$cluster
results.naive <- t(apply(X, 2, function(u) summary(glm(u~as.factor(clusters.full), family="poisson"))$coefficients[2,]))
ggplot(data=NULL, aes(sample=results.naive[,4]))+geom_qq(distribution=stats::qunif)+geom_abline(col="red")
set.seed(2)
split <- countsplit(X, folds=2, epsilon=c(0.5,0.5))
Xtrain <- split[[1]]
Xtest <- split[[2]]
clusters.train <- kmeans(log(Xtrain+1), centers=2)$cluster
results.countsplit <- t(apply(Xtest, 2, function(u) summary(glm(u~as.factor(clusters.train), family="poisson"))$coefficients[2,]))
ggplot(data=NULL)+
geom_qq(aes(sample=results.naive[,4], col="Naive method"),
distribution=stats::qunif)+
geom_qq(aes(sample=results.countsplit[,4], col="Poisson count splitting"), distribution=stats::qunif)+
geom_abline(col="red")
cors <- sapply(1:p, function(u) cor(Xtrain[,u], Xtest[,u]))
hist(cors, xlim=c(-1,1))
set.seed(2)
splitNB <- countsplit(X, folds=2, epsilon=c(0.5,0.5), overdisps=rep(5,p))
Xtrain <- split[[1]]
Xtest <- split[[2]]
clusters.train <- kmeans(log(Xtrain+1), centers=2)$cluster
results.countsplit.NB <- t(apply(Xtest, 2, function(u) summary(glm(u~as.factor(clusters.train), family="poisson"))$coefficients[2,]))
ggplot(data=NULL)+
geom_qq(aes(sample=results.naive[,4], col="Naive method"),
distribution=stats::qunif)+
geom_qq(aes(sample=results.countsplit[,4], col="Poisson count splitting"), distribution=stats::qunif)+
geom_qq(aes(sample=results.countsplit.NB[,4], col="Ideal NB count splitting"), distribution=stats::qunif)+
geom_abline(col="red")
set.seed(1)
n <- 1000
p <- 200
X <- matrix(rnbinom(n*p, mu=5, size=5), nrow=n)
## Sanity check on parameterization
mean(as.numeric(X))
var(as.numeric(X))
5+5^2/5
clusters.full <- kmeans(log(X+1), centers=2)$cluster
results.naive <- t(apply(X, 2, function(u) summary(glm(u~as.factor(clusters.full), family="poisson"))$coefficients[2,]))
ggplot(data=NULL, aes(sample=results.naive[,4]))+geom_qq(distribution=stats::qunif)+geom_abline(col="red")
set.seed(2)
split <- countsplit(X, folds=2, epsilon=c(0.5,0.5))
Xtrain <- split[[1]]
Xtest <- split[[2]]
clusters.train <- kmeans(log(Xtrain+1), centers=2)$cluster
results.countsplit <- t(apply(Xtest, 2, function(u) summary(glm(u~as.factor(clusters.train), family="poisson"))$coefficients[2,]))
ggplot(data=NULL)+
geom_qq(aes(sample=results.naive[,4], col="Naive method"),
distribution=stats::qunif)+
geom_qq(aes(sample=results.countsplit[,4], col="Poisson count splitting"), distribution=stats::qunif)+
geom_abline(col="red")
cors <- sapply(1:p, function(u) cor(Xtrain[,u], Xtest[,u]))
hist(cors, xlim=c(-1,1))
p
set.seed(2)
split <- countsplit(X)
Xtrain <- split[[1]]
Xtest <- split[[2]]
clusters.train <- kmeans(log(Xtrain+1), centers=2)$cluster
results.countsplit <- t(apply(Xtest, 2, function(u) summary(glm(u~as.factor(clusters.train), family="poisson"))$coefficients[2,]))
ggplot(data=NULL)+
geom_qq(aes(sample=results.naive[,4], col="Naive method"),
distribution=stats::qunif)+
geom_qq(aes(sample=results.countsplit[,4], col="Poisson count splitting"), distribution=stats::qunif)+
geom_abline(col="red")
cors <- sapply(1:p, function(u) cor(Xtrain[,u], Xtest[,u]))
hist(cors, xlim=c(-1,1))
set.seed(2)
splitNB <- countsplit(X, overdisps=rep(5,p))
Xtrain <- splitNB[[1]]
Xtest <- splitNB[[2]]
clusters.train <- kmeans(log(Xtrain+1), centers=2)$cluster
results.countsplit.NB <- t(apply(Xtest, 2, function(u) summary(glm(u~as.factor(clusters.train), family="poisson"))$coefficients[2,]))
ggplot(data=NULL)+
geom_qq(aes(sample=results.naive[,4], col="Naive method"),
distribution=stats::qunif)+
geom_qq(aes(sample=results.countsplit[,4], col="Poisson count splitting"), distribution=stats::qunif)+
geom_qq(aes(sample=results.countsplit.NB[,4], col="Ideal NB count splitting"), distribution=stats::qunif)+
geom_abline(col="red")
set.seed(2)
splitNB <- countsplit(X, overdisps=rep(5,p))
Xtrain <- splitNB[[1]]
Xtest <- splitNB[[2]]
clusters.train <- kmeans(log(Xtrain+1), centers=2)$cluster
results.countsplit.NB <- t(apply(Xtest, 2, function(u) summary(glm(u~as.factor(clusters.train), family="poisson"))$coefficients[2,]))
ggplot(data=NULL)+
geom_qq(aes(sample=results.naive[,4], col="Naive method"),
distribution=stats::qunif)+
geom_qq(aes(sample=results.countsplit[,4], col="Poisson count splitting"), distribution=stats::qunif)+
geom_qq(aes(sample=results.countsplit.NB[,4], col="Ideal NB count splitting"), distribution=stats::qunif)+
geom_abline(col="red")
countsplit
set.seed(2)
splitNB <- countsplit(X, overdisps=rep(5,p))
Xtrain <- splitNB[[1]]
Xtest <- splitNB[[2]]
clusters.train <- kmeans(log(Xtrain+1), centers=2)$cluster
results.countsplit.NB <- t(apply(Xtest, 2, function(u) summary(glm(u~as.factor(clusters.train), family="poisson"))$coefficients[2,]))
ggplot(data=NULL)+
geom_qq(aes(sample=results.naive[,4], col="Naive method"),
distribution=stats::qunif)+
geom_qq(aes(sample=results.countsplit[,4], col="Poisson count splitting"), distribution=stats::qunif)+
geom_qq(aes(sample=results.countsplit.NB[,4], col="Ideal NB count splitting"), distribution=stats::qunif)+
geom_abline(col="red")
set.seed(2)
splitNB <- countsplit(X, overdisps=rep(5,p))
Xtrain <- splitNB[[1]]
Xtest <- splitNB[[2]]
clusters.train <- kmeans(log(Xtrain+1), centers=2)$cluster
results.countsplit.NB <- t(apply(Xtest, 2, function(u) summary(NB.glm(u~as.factor(clusters.train), family="poisson"))$coefficients[2,]))
set.seed(2)
splitNB <- countsplit(X, overdisps=rep(5,p))
Xtrain <- splitNB[[1]]
Xtest <- splitNB[[2]]
clusters.train <- kmeans(log(Xtrain+1), centers=2)$cluster
results.countsplit.NB <- t(apply(Xtest, 2, function(u) summary(MASS::nb.glm(u~as.factor(clusters.train)))$coefficients[2,]))
set.seed(2)
splitNB <- countsplit(X, overdisps=rep(5,p))
Xtrain <- splitNB[[1]]
Xtest <- splitNB[[2]]
clusters.train <- kmeans(log(Xtrain+1), centers=2)$cluster
results.countsplit.NB <- t(apply(Xtest, 2, function(u) summary(MASS::glm.nb(u~as.factor(clusters.train)))$coefficients[2,]))
ggplot(data=NULL)+
geom_qq(aes(sample=results.naive[,4], col="Naive method"),
distribution=stats::qunif)+
geom_qq(aes(sample=results.countsplit[,4], col="Poisson count splitting"), distribution=stats::qunif)+
geom_qq(aes(sample=results.countsplit.NB[,4], col="Ideal NB count splitting"), distribution=stats::qunif)+
geom_abline(col="red")
clusters.full <- kmeans(log(X+1), centers=2)$cluster
results.naive <- t(apply(X, 2, function(u) summary(MASS::glm.nb(u~as.factor(clusters.full)))$coefficients[2,]))
ggplot(data=NULL, aes(sample=results.naive[,4]))+geom_qq(distribution=stats::qunif)+geom_abline(col="red")
set.seed(2)
split <- countsplit(X)
Xtrain <- split[[1]]
Xtest <- split[[2]]
clusters.train <- kmeans(log(Xtrain+1), centers=2)$cluster
results.countsplit <- t(apply(Xtest, 2, function(u) summary(MASS::glm.nb(u~as.factor(clusters.train)))$coefficients[2,]))
ggplot(data=NULL)+
geom_qq(aes(sample=results.naive[,4], col="Naive method"),
distribution=stats::qunif)+
geom_qq(aes(sample=results.countsplit[,4], col="Poisson count splitting"), distribution=stats::qunif)+
geom_abline(col="red")
cors <- sapply(1:p, function(u) cor(Xtrain[,u], Xtest[,u]))
hist(cors, xlim=c(-1,1))
set.seed(2)
splitNB <- countsplit(X, overdisps=rep(5,p))
Xtrain <- splitNB[[1]]
Xtest <- splitNB[[2]]
clusters.train <- kmeans(log(Xtrain+1), centers=2)$cluster
results.countsplit.NB <- t(apply(Xtest, 2, function(u) summary(MASS::glm.nb(u~as.factor(clusters.train)))$coefficients[2,]))
ggplot(data=NULL)+
geom_qq(aes(sample=results.naive[,4], col="Naive method"),
distribution=stats::qunif)+
geom_qq(aes(sample=results.countsplit[,4], col="Poisson count splitting"), distribution=stats::qunif)+
geom_qq(aes(sample=results.countsplit.NB[,4], col="Ideal NB count splitting"), distribution=stats::qunif)+
geom_abline(col="red")
ilibrary(monocle3)
library(monocle3)
libeary(monocle3)
library(monocle3)
if (!requireNamespace("BiocManager", quietly = TRUE))
install.packages("BiocManager")
BiocManager::install(version = "3.14")
BiocManager::install(version = "3.17")
library(monocle3)
BiocManager::install(c('BiocGenerics', 'DelayedArray', 'DelayedMatrixStats',
'limma', 'lme4', 'S4Vectors', 'SingleCellExperiment',
'SummarizedExperiment', 'batchelor', 'HDF5Array',
'terra', 'ggrastr'))
install.packages("scuttle")
install.packages("devtools")
devtools::install_github('cole-trapnell-lab/monocle3')
