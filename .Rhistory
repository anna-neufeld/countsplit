EX <- Lambda*overdisps
X <- rpois(n, EX)
n=1000
Lambda <- 5
b=1
overdisps <- rgamma(n, b,b)
EX <- Lambda*overdisps
X <- rpois(n, EX)
Xtrain_correct <- sapply(X,function(u) betaBinSample(u, bs, ep*bs))
Xtest_correct <- X-Xtrain_correct
Xtrain_under <- sapply(X,function(u) betaBinSample(u, 0.5*bs, ep*0.5*bs))
source("~/Dropbox/Overdispersion Project/june_sims/nb_split_funs.R")
n=1000
Lambda <- 5
b=1
overdisps <- rgamma(n, b,b)
EX <- Lambda*overdisps
X <- rpois(n, EX)
Xtrain_correct <- sapply(X,function(u) betaBinSample(u, bs, ep*bs))
Xtest_correct <- X-Xtrain_correct
ep = 0.5
Xtrain_correct <- sapply(X,function(u) betaBinSample(u, bs, ep*bs))
Xtest_correct <- X-Xtrain_correct
Xtrain_under <- sapply(X,function(u) betaBinSample(u, 0.5*bs, ep*0.5*bs))
n=1000
Lambda <- 5
b=1
overdisps <- rgamma(n, b,b)
EX <- Lambda*overdisps
X <- rpois(n, EX)
ep = 0.5
Xtrain_correct <- sapply(X,function(u) betaBinSample(u, b, ep*b))
Xtest_correct <- X-Xtrain_correct
Xtrain_under <- sapply(X,function(u) betaBinSample(u, 0.5*b, ep*0.5*b))
Xtest_under <- X-Xtrain_under
Xtrain_over <- sapply(X,function(u) betaBinSample(u, 2*b, ep*2*b))
Xtest_over<- X-Xtrain_over
cor(Xtrain_correct, Xtest_correct)
cor(Xtrain_correct, Xtest_correct)
cor(Xtrain_under, Xtest_under)
cor(Xtrain_over, Xtest_over)
bps <- exp(seq(-log10(1000), log10(1000), length.out=50)[-1])
bps
bps <- exp(seq(-log(1000), log(1000), length.out=50)[-1])
bps
betaBinSample <- function(x, r,r1) {
p <- rbeta(length(x),r1,r-r1)
return(rbinom(length(x),x,p))
}
n=10000
Lambda <- 5
b=1
overdisps <- rgamma(n, b,b)
X <- rpois(n, 5*overdisps)
ep = 0.5
bps <- exp(seq(-log(1000), log(1000), length.out=50)[-1])
cors <- rep(NA, length(bps))
c <- 1
for (bp in bps) {
Xtrain <- sapply(X,function(u) betaBinSample(u, bp, ep*bp))
Xtest <- X-Xtrain_correct
cors[c] <-cor(Xtrain, Xtest)
c <- c+1
}
n=10000
Lambda <- 5
b=1
overdisps <- rgamma(n, b,b)
X <- rpois(n, 5*overdisps)
ep = 0.5
bps <- exp(seq(-log(1000), log(1000), length.out=50)[-1])
cors <- rep(NA, length(bps))
c <- 1
for (bp in bps) {
Xtrain <- sapply(X,function(u) betaBinSample(u, bp, ep*bp))
Xtest <- X-Xtrain_correct
cors[c] <-cor(Xtrain, Xtest)
c <- c+1
}
ggplot(aes(x=bps, y=cors)) + geom_smooth()+theme_bw()+geom_vline(xintercept=1)
ggplot(data=NULL, aes(x=bps, y=cors)) + geom_smooth()+theme_bw()+geom_vline(xintercept=1)
n=10000
Lambda <- 5
b=1
overdisps <- rgamma(n, b,b)
X <- rpois(n, 5*overdisps)
ep = 0.5
bps <- exp(seq(-log(1000), log(1000), length.out=50)[-1])
cors <- rep(NA, length(bps))
c <- 1
for (bp in bps) {
Xtrain <- sapply(X,function(u) betaBinSample(u, bp, ep*bp))
Xtest <- X-Xtrain
cors[c] <-cor(Xtrain, Xtest)
c <- c+1
}
ggplot(data=NULL, aes(x=bps, y=cors)) + geom_smooth()+theme_bw()+geom_vline(xintercept=1)
ggplot(data=NULL, aes(x=bps, y=cors)) + geom_smooth()+theme_bw()+geom_vline(xintercept=1)
ggplot(data=NULL, aes(x=bps, y=cors)) + geom_line()+theme_bw()+geom_vline(xintercept=1)
ggplot(data=NULL, aes(x=bps, y=cors)) + geom_line()+theme_bw()+geom_vline(xintercept=1)+scale_x_log190
ggplot(data=NULL, aes(x=bps, y=cors)) + geom_line()+theme_bw()+geom_vline(xintercept=1)+scale_x_log10()
n=10000
Lambda <- 5
b=1
overdisps <- rgamma(n, b,b)
X <- rpois(n, 5*overdisps)
ep = 0.5
bps <- 10^(seq(-log10(1000), log10(1000), length.out=50)[-1])
cors <- rep(NA, length(bps))
c <- 1
for (bp in bps) {
Xtrain <- sapply(X,function(u) betaBinSample(u, bp, ep*bp))
Xtest <- X-Xtrain
cors[c] <-cor(Xtrain, Xtest)
c <- c+1
}
ggplot(data=NULL, aes(x=bps, y=cors)) + geom_smooth()+theme_bw()+geom_vline(xintercept=1)
ggplot(data=NULL, aes(x=bps, y=cors)) + geom_smooth()+theme_bw()+geom_vline(xintercept=1)+xlab("b' (log scale)") + ylab("Sample Correlation")
ggplot(data=NULL, aes(x=bps, y=cors)) + geom_smooth()+theme_bw()+geom_vline(xintercept=1)+xlab("b' (log scale)") + ylab("Sample Correlation")+scale_x_log10()
ggplot(data=NULL, aes(x=bps, y=cors)) + geom_line()+theme_bw()+geom_vline(xintercept=1)+xlab("b' (log scale)") + ylab("Sample Correlation")+scale_x_log10()
ggplot(data=NULL, aes(x=bps, y=cors)) + geom_line()+theme_bw()+geom_vline(xintercept=1, col="red")+xlab("b' (log scale)") + ylab("Sample Correlation")+scale_x_log10()+geom_hline(yintercept=0, col="red", lty=2)
ggplot(data=res %>% filter(j > 0), aes(sample=pval, col=method2))+geom_qq(distribution="qunif")+
facet_wrap(vars(b2))+coord_fixed()+theme_bw()+labs(col="Method")
head(rez)
head(res)
setwd("~/Dropbox/Overdispersion Project/june_sims/June27/")
res <- read.csv("nonnull_res.txt", header=FALSE, sep=" ")
names(res) <- c("pval", "est_effect", "est_b_train", "truesig",
"rand", "est_b_full", "j","b", "beta","method")
res <- res %>% mutate(b2 = paste("true b=", b), method = ifelse(method=="dcs_known",
"gcs_known", method))
res$b2 <- factor(res$b2, levels=c("true b= 0.2", "true b= 0.5",   "true b= 1", "true b= 3", "true b= 5", "true b= 10"))
res$method2 <- factor(res$method,
levels=c("naive", "cs",  "gcs_stupid_cons", "gcs_cons", "gcs_known", "gcs_dd_2", "gcs_dd_5", "gcs_dd_20"))
max(res$beta)
ggplot(data=null_res %>% filter(method != "cs", method != "naive"), aes(x=as.factor(method2), y=est_b_full))+geom_boxplot()+
facet_wrap(vars(b2), scales="free")+geom_hline(aes(yintercept=b), col="red")+
theme(axis.text.x=element_text(angle=90))+
scale_y_log10()+ggtitle("Under Global Null")+xlab("Method")+ylab("Estimated b")
ggplot(data=res %>% filter(method != "cs", method != "naive"), aes(x=as.factor(method2), y=est_b_full))+geom_boxplot()+
facet_wrap(vars(b2), scales="free")+geom_hline(aes(yintercept=b), col="red")+
theme(axis.text.x=element_text(angle=90))+
scale_y_log10()+ggtitle("Under Alternative")+xlab("Method")+ylab("Estimated b")
set.seed(1)
n <- 1000
p <- 200
X <- matrix(rpois(n*p, lambda=5), nrow=n)
clusters.full <- kmeans(log(X+1), centers=2)$cluster
results.naive <- t(apply(X, 2, function(u) summary(glm(u~as.factor(clusters.full), family="poisson"))$coefficients[2,]))
head(results.naive)
ggplot(data=NULL, aes(sample=results.naive[,4]))+geom_qq(distribution="qunif")+geom_abline(col="red")
set.seed(2)
split <- countsplit(X, epsilon=0.5)
library(countsplit)
set.seed(2)
split <- countsplit(X, epsilon=0.5)
names(split)
Xtrain <- split$train
Xtest <- split$test
clusters.train <- kmeans(log(Xtrain+1), centers=2)$cluster
results.countsplit <- t(apply(Xtest, 2, function(u) summary(glm(u~as.factor(clusters.train), family="poisson"))$coefficients[2,]))
head(results.countsplit)
ggplot(data=NULL, aes(sample=results.countsplit[,4]))+geom_qq(distribution="qunif")+geom_abline(col="red")
set.seed(1)
n <- 1000
p <- 200
clusters.true <- rbinom(n, size=1, prob=0.5)
Lambda <- matrix(5, nrow=n, ncol=p)
Lambda[clusters.true==1, 1:10] <- 10
X <-apply(Lambda,1:2,rpois,n=1)
split <- countsplit(X, epsilon=0.5)
Xtrain <- split$train
Xtest <- split$test
clusters.full <- kmeans(log(X+1), centers=2)$cluster
table(clusters.true, clusters.full)
clusters.train <- kmeans(log(Xtrain+1), centers=2)$cluster
table(clusters.true, clusters.train)
coeffs.X <- t(apply(X, 2, function(u) summary(glm(u~as.factor(clusters.true), family="poisson"))$coefficients[,1]))
coeffs.Xtest <- t(apply(Xtest, 2, function(u) summary(glm(u~as.factor(clusters.true), family="poisson"))$coefficients[,1]))
differentially_expressed = as.factor(c(rep(1,10), rep(0,190)))
p1 <- ggplot(data=NULL, aes(x=coeffs.X[,1], y=coeffs.Xtest[,1], col=differentially_expressed))+
geom_point()+
geom_abline(intercept= log(0.5), slope=1, col="red")+
geom_abline(intercept= 0, slope=1, col="red", lty=2)+
coord_fixed()+xlim(0,2)+ylim(0,2)+
xlab("Intercepts from X")+ ylab("Intercepts from Xtest")+
ggtitle("Intercepts")
p2 <- ggplot(data=NULL, aes(x=coeffs.X[,2], y=coeffs.Xtest[,2], col=differentially_expressed))+
geom_point()+
geom_abline(intercept=0, slope=1, col="red")+
coord_fixed()+xlim(-0.15,1)+ylim(-0.15,1)+
xlab("Slopes from X")+ ylab("Slopes from Xtest")+
ggtitle("Slopes")
p1 + p2 + plot_layout(guides="collect") & theme_bw()
library(patchwork)
p1 + p2 + plot_layout(guides="collect") & theme_bw()
p1 + p2 + plot_layout(guides="collect") & theme_bw()
knitr::opts_chunk$set(echo = TRUE, message=FALSE, warning=FALSE)
library(Seurat)
library(countsplit)
library(ggplot2)
library(patchwork)
library(mclust)
data(pbmc.counts, package="countsplit")
rownames(pbmc.counts) <- sapply(rownames(pbmc.counts), function(u) stringr::str_replace_all(u, "_","-"))
set.seed(1)
split <- countsplit(pbmc.counts, epsilon=0.5)
Xtrain <- split$train
Xtest <- split$test
pbmc.train <- CreateSeuratObject(counts = Xtrain, min.cells = 3, min.features = 200)
library(tidyverse)
setwd("~/Dropbox/Overdispersion Project/june_sims/June27/")
null_res <- read.csv("null_res.txt", header=FALSE, sep=" ")
names(null_res) <- c("pval", "est_effect", "est_b_train", "truesig",
"rand", "est_b_full", "j","b", "beta", "method")
null_res <- null_res %>% mutate(b2 = paste("true b=", b), method = ifelse(method=="dcs_known",
"gcs_known", method))
null_res$b2 <- factor(null_res$b2, levels=c("true b= 0.2", "true b= 0.5",   "true b= 1", "true b= 3", "true b= 5", "true b= 10"))
null_res$method2 <- factor(null_res$method,
levels=c("naive", "cs",  "gcs_stupid_cons", "gcs_cons", "gcs_known", "gcs_dd_2", "gcs_dd_5", "gcs_dd_20"))
### TO DO: add beta to this.
setwd("~/Dropbox/Overdispersion Project/june_sims/June27/")
res <- read.csv("nonnull_res.txt", header=FALSE, sep=" ")
names(res) <- c("pval", "est_effect", "est_b_train", "truesig",
"rand", "est_b_full", "j","b", "beta","method")
res <- res %>% mutate(b2 = paste("true b=", b), method = ifelse(method=="dcs_known",
"gcs_known", method))
res$b2 <- factor(res$b2, levels=c("true b= 0.2", "true b= 0.5",   "true b= 1", "true b= 3", "true b= 5", "true b= 10"))
res$method2 <- factor(res$method,
levels=c("naive", "cs",  "gcs_stupid_cons", "gcs_cons", "gcs_known", "gcs_dd_2", "gcs_dd_5", "gcs_dd_20"))
ggplot(data=null_res %>% filter(method != "cs", method != "naive"), aes(x=as.factor(method2), y=est_b_full))+geom_boxplot()+
facet_wrap(vars(b2), scales="free")+geom_hline(aes(yintercept=b), col="red")+
theme(axis.text.x=element_text(angle=90))+
scale_y_log10()+ggtitle("Under Global Null")+xlab("Method")+ylab("Estimated b")
ggplot(data=res %>% filter(method != "cs", method != "naive"), aes(x=as.factor(method2), y=est_b_full))+geom_boxplot()+
facet_wrap(vars(b2), scales="free")+geom_hline(aes(yintercept=b), col="red")+
theme(axis.text.x=element_text(angle=90))+
scale_y_log10()+ggtitle("Under Alternative")+xlab("Method")+ylab("Estimated b")
ggplot(data=res %>% filter(j > 5), aes(x=as.factor(method2), y=est_b_full))+geom_boxplot()+
facet_wrap(vars(b2), scales="free")+geom_hline(aes(yintercept=b), col="red")+
theme(axis.text.x=element_text(angle=90))+
scale_y_log10()+ggtitle("Under Alternative: null genes")+xlab("Method")+ylab("Estimated b")
ggplot(data=res %>% filter(j > 5), aes(x=as.factor(method2), y=est_b_full))+geom_boxplot()+
facet_wrap(vars(b2), scales="free")+geom_hline(aes(yintercept=b), col="red")+
theme(axis.text.x=element_text(angle=90))+
scale_y_log10()+ggtitle("Under Alternative: null genes")+xlab("Method")+ylab("Estimated b")
max(res$beta)
ggplot(data=res %>% filter(j > 5, beta > 1), aes(x=as.factor(method2), y=est_b_full))+geom_boxplot()+
facet_wrap(vars(b2), scales="free")+geom_hline(aes(yintercept=b), col="red")+
theme(axis.text.x=element_text(angle=90))+
scale_y_log10()+ggtitle("Under Alternative: null genes")+xlab("Method")+ylab("Estimated b")
setwd("~/Dropbox/Overdispersion Project/june_sims/June27/")
res <- read.csv("nonnull_res.txt", header=FALSE, sep=" ")
names(res) <- c("pval", "est_effect", "est_b_train", "truesig",
"rand", "est_b_full", "j","b", "beta","method")
max(res$beta)
ggplot(data=res %>% filter(j <= 5),
aes(x=abs(truesig), y = as.numeric(pval < 0.05), col=method))+geom_smooth(method="glm", method.args=list(family="binomial"))+
facet_wrap(vars(b))+
ylab("Proportion of Nulls Rejected")+
ylab("True Signal (estimated clusters)")+theme_bw()
ggplot(data=null_res, aes(sample=pval, col=method2))+geom_qq(distribution="qunif")+
facet_wrap(vars(b2))+coord_fixed()+theme_bw()+labs(col="Method")
ggplot(data=res %>% filter(j > 5), aes(sample=pval, col=method2))+geom_qq(distribution="qunif")+
facet_wrap(vars(b2))+coord_fixed()+theme_bw()+labs(col="Method")
library(tidyverse)
setwd("~/Dropbox/Overdispersion Project/june_sims/June27/")
null_res <- read.csv("null_res.txt", header=FALSE, sep=" ")
names(null_res) <- c("pval", "est_effect", "est_b_train", "truesig",
"rand", "est_b_full", "j","b", "beta", "method")
null_res <- null_res %>% mutate(b2 = paste("true b=", b), method = ifelse(method=="dcs_known",
"gcs_known", method))
null_res$b2 <- factor(null_res$b2, levels=c("true b= 0.2", "true b= 0.5",   "true b= 1", "true b= 3", "true b= 5", "true b= 10"))
null_res$method2 <- factor(null_res$method,
levels=c("naive", "cs",  "gcs_stupid_cons", "gcs_cons", "gcs_known", "gcs_dd_2", "gcs_dd_5", "gcs_dd_20"))
### TO DO: add beta to this.
setwd("~/Dropbox/Overdispersion Project/june_sims/June27/")
res <- read.csv("nonnull_res.txt", header=FALSE, sep=" ")
names(res) <- c("pval", "est_effect", "est_b_train", "truesig",
"rand", "est_b_full", "j","b", "beta","method")
res <- res %>% mutate(b2 = paste("true b=", b), method = ifelse(method=="dcs_known",
"gcs_known", method))
res$b2 <- factor(res$b2, levels=c("true b= 0.2", "true b= 0.5",   "true b= 1", "true b= 3", "true b= 5", "true b= 10"))
res$method2 <- factor(res$method,
levels=c("naive", "cs",  "gcs_stupid_cons", "gcs_cons", "gcs_known", "gcs_dd_2", "gcs_dd_5", "gcs_dd_20"))
ggplot(data=res %>% filter(j > 5, beta > 1), aes(x=as.factor(method2), y=est_b_full))+geom_boxplot()+
facet_wrap(vars(b2), scales="free")+geom_hline(aes(yintercept=b), col="red")+
theme(axis.text.x=element_text(angle=90))+
scale_y_log10()+ggtitle("Under Alternative: null genes")+xlab("Method")+ylab("Estimated b")
library(tidyverse)
setwd("~/Dropbox/Overdispersion Project/june_sims/June27/")
null_res <- read.csv("null_res.txt", header=FALSE, sep=" ")
names(null_res) <- c("pval", "est_effect", "est_b_train", "truesig",
"rand", "est_b_full", "j","b", "beta", "method")
null_res <- null_res %>% mutate(b2 = paste("true b=", b), method = ifelse(method=="dcs_known",
"gcs_known", method))
null_res$b2 <- factor(null_res$b2, levels=c("true b= 0.2", "true b= 0.5",   "true b= 1", "true b= 3", "true b= 5", "true b= 10"))
null_res$method2 <- factor(null_res$method,
levels=c("naive", "cs",  "gcs_stupid_cons", "gcs_cons", "gcs_known", "gcs_dd_2", "gcs_dd_5", "gcs_dd_20"))
### TO DO: add beta to this.
setwd("~/Dropbox/Overdispersion Project/june_sims/June27/")
res <- read.csv("nonnull_res.txt", header=FALSE, sep=" ")
names(res) <- c("pval", "est_effect", "est_b_train", "truesig",
"rand", "est_b_full", "j","b", "beta","method")
res <- res %>% mutate(b2 = paste("true b=", b), method = ifelse(method=="dcs_known",
"gcs_known", method))
res$b2 <- factor(res$b2, levels=c("true b= 0.2", "true b= 0.5",   "true b= 1", "true b= 3", "true b= 5", "true b= 10"))
res$method2 <- factor(res$method,
levels=c("naive", "cs",  "gcs_stupid_cons", "gcs_cons", "gcs_known", "gcs_dd_2", "gcs_dd_5", "gcs_dd_20"))
ggplot(data=null_res %>% filter(method != "cs", method != "naive"), aes(x=as.factor(method2), y=est_b_full))+geom_boxplot()+
facet_wrap(vars(b2), scales="free")+geom_hline(aes(yintercept=b), col="red")+
theme(axis.text.x=element_text(angle=90))+
scale_y_log10()+ggtitle("Under Global Null")+xlab("Method")+ylab("Estimated b")
head(null_res)
had(res)
head(res)
ggplot(data=null_res %>% filter(method != "cs", method != "naive"), aes(x=as.factor(method2), y=est_b_full))+geom_boxplot()+
facet_wrap(vars(b2), scales="free")+geom_hline(aes(yintercept=b), col="red")+
theme(axis.text.x=element_text(angle=90))+
scale_y_log10()+ggtitle("Under Global Null")+xlab("Method")+ylab("Estimated b")
ggplot(data=res %>% filter(method != "cs", method != "naive"), aes(x=as.factor(method2), y=est_b_full))+geom_boxplot()+
facet_wrap(vars(b2), scales="free")+geom_hline(aes(yintercept=b), col="red")+
theme(axis.text.x=element_text(angle=90))+
scale_y_log10()+ggtitle("Under Alternative: All genes")+xlab("Method")+ylab("Estimated b")
ggplot(data=res %>% filter(j > 5, beta > 1), aes(x=as.factor(method2), y=est_b_full))+geom_boxplot()+
facet_wrap(vars(b2), scales="free")+geom_hline(aes(yintercept=b), col="red")+
theme(axis.text.x=element_text(angle=90))+
scale_y_log10()+ggtitle("Under Alternative: null genes")+xlab("Method")+ylab("Estimated b")
cons_res <- res %>% mutate(null = truesig==0) %>% filter(method2 == "gcs_dd_20" | method2=="gcs_cons") %>% group_by(null, method2, method, beta, b2,b) %>% summarize(meanbfull = median(est_b_full))
ggplot(data=cons_res , aes(x=beta, y=meanbfull, col=method2, lty=null))+geom_line()+
facet_wrap(vars(b2), scales="free")+geom_hline(aes(yintercept=b), col="black")+
scale_y_log10()+ggtitle("Under Alternative")+xlab("Method")+ylab("Estimated b")+theme_bw()
cons_res <- res %>% mutate(null = j <= 5) %>% filter(method2 == "gcs_dd_20" | method2=="gcs_cons") %>% group_by(null, method2, method, beta, b2,b) %>% summarize(meanbfull = median(est_b_full))
ggplot(data=cons_res , aes(x=beta, y=meanbfull, col=method2, lty=null))+geom_line()+
facet_wrap(vars(b2), scales="free")+geom_hline(aes(yintercept=b), col="black")+
scale_y_log10()+ggtitle("Under Alternative")+xlab("Method")+ylab("Median estimated b")+theme_bw()
cons_res <- res %>% mutate(null = j > 5) %>% filter(method2 == "gcs_dd_20" | method2=="gcs_cons") %>% group_by(null, method2, method, beta, b2,b) %>% summarize(meanbfull = median(est_b_full))
ggplot(data=cons_res , aes(x=beta, y=meanbfull, col=method2, lty=null))+geom_line()+
facet_wrap(vars(b2), scales="free")+geom_hline(aes(yintercept=b), col="black")+
scale_y_log10()+ggtitle("Under Alternative")+xlab("Method")+ylab("Median estimated b")+theme_bw()
cons_res <- res %>% mutate(null = j > 5) %>% filter(method2 == "gcs_dd_20" | method2=="gcs_cons") %>% group_by(null, method2, method, beta, b2,b) %>% summarize(meanbfull = median(est_b_full))
ggplot(data=cons_res , aes(x=beta, y=meanbfull, col=method2, lty=null, width=2))+geom_line()+
facet_wrap(vars(b2), scales="free")+geom_hline(aes(yintercept=b), col="black")+
scale_y_log10()+ggtitle("Under Alternative")+xlab("Method")+ylab("Median estimated b")+theme_bw()
cons_res <- res %>% mutate(null = j > 5) %>% filter(method2 == "gcs_dd_20" | method2=="gcs_cons") %>% group_by(null, method2, method, beta, b2,b) %>% summarize(meanbfull = median(est_b_full))
ggplot(data=cons_res , aes(x=beta, y=meanbfull, col=method2, lty=null, lwd=2))+geom_line()+
facet_wrap(vars(b2), scales="free")+geom_hline(aes(yintercept=b), col="black")+
scale_y_log10()+ggtitle("Under Alternative")+xlab("Method")+ylab("Median estimated b")+theme_bw()
cons_res <- res %>% mutate(null = j > 5) %>% filter(method2 == "gcs_dd_20" | method2=="gcs_cons") %>% group_by(null, method2, method, beta, b2,b) %>% summarize(meanbfull = median(est_b_full))
ggplot(data=cons_res , aes(x=beta, y=meanbfull, col=method2, lty=null, lwd=1.1))+geom_line()+
facet_wrap(vars(b2), scales="free")+geom_hline(aes(yintercept=b), col="black")+
scale_y_log10()+ggtitle("Under Alternative")+xlab("Method")+ylab("Median estimated b")+theme_bw()
cons_res <- res %>% mutate(null = j > 5) %>% filter(method2 == "gcs_dd_20" | method2=="gcs_cons") %>% group_by(null, method2, method, beta, b2,b) %>% summarize(meanbfull = median(est_b_full))
ggplot(data=cons_res , aes(x=beta, y=meanbfull, col=method2, lty=null, lwd=0,8))+geom_line()+
facet_wrap(vars(b2), scales="free")+geom_hline(aes(yintercept=b), col="black")+
scale_y_log10()+ggtitle("Under Alternative")+xlab("Method")+ylab("Median estimated b")+theme_bw()
cons_res <- res %>% mutate(null = j > 5) %>% filter(method2 == "gcs_dd_20" | method2=="gcs_cons") %>% group_by(null, method2, method, beta, b2,b) %>% summarize(meanbfull = median(est_b_full))
ggplot(data=cons_res , aes(x=beta, y=meanbfull, col=method2, lty=null))+geom_line(lwd=1)+
facet_wrap(vars(b2), scales="free")+geom_hline(aes(yintercept=b), col="black")+
scale_y_log10()+ggtitle("Under Alternative")+xlab("Method")+ylab("Median estimated b")+theme_bw()
cons_res <- res %>% mutate(null = j > 5) %>% filter(method2 == "gcs_dd_20" | method2=="gcs_cons") %>% group_by(null, method2, method, beta, b2,b) %>% summarize(meanbfull = median(est_b_full))
ggplot(data=cons_res , aes(x=beta, y=meanbfull, col=method2, lty=null))+geom_line(lwd=1)+
facet_wrap(vars(b2), scales="free")+geom_hline(aes(yintercept=b), col="black")+
scale_y_log10()+ggtitle("Under Alternative")+xlab("Beta")+ylab("Median estimated b")+theme_bw()+labs(col="method")
ggplot(data=null_res, aes(x=as.factor(method2), y=est_b_train))+geom_boxplot()+
facet_wrap(vars(b2), scales="free")+geom_hline(aes(yintercept=b), col="red")+
geom_hline(aes(yintercept=b/2), col="red", lty=2)+
theme(axis.text.x=element_text(angle=90))+
scale_y_log10()
ggplot(data=null_res, aes(x=as.factor(method2), y=est_b_train))+geom_boxplot()+
facet_wrap(vars(b2), scales="free")+geom_hline(aes(yintercept=b), col="red")+
geom_hline(aes(yintercept=b/2), col="red", lty=2)+
theme(axis.text.x=element_text(angle=90))+
scale_y_log10()
ggplot(data=null_res, aes(sample=pval, col=method2))+geom_qq(distribution="qunif")+
facet_wrap(vars(b2))+coord_fixed()+theme_bw()+labs(col="Method")
ggplot(data=res %>% filter(j > 5, beta > 1), aes(x=as.factor(method2), y=est_b_full))+geom_boxplot()+
facet_wrap(vars(b2), scales="free")+geom_hline(aes(yintercept=b), col="red")+
theme(axis.text.x=element_text(angle=90))+
scale_y_log10()+ggtitle("Under Alternative: null genes")+xlab("Method")+ylab("Estimated b")
ggplot(data=res %>% filter(j > 5), aes(sample=pval, col=method2))+geom_qq(distribution="qunif")+
facet_wrap(vars(b2))+coord_fixed()+theme_bw()+labs(col="Method")+ggtitle("Non Global Null")
ggplot(data=res %>% filter(j <= 5),
aes(x=abs(truesig), y = as.numeric(pval < 0.05), col=method))+geom_smooth(method="glm", method.args=list(family="binomial"))+
facet_wrap(vars(b))+
ylab("Proportion of Nulls Rejected")+
ylab("True Signal (estimated clusters)")+theme_bw()
ggplot(data=res %>% filter(j == 1),
aes(x=abs(truesig), y = as.numeric(pval < 0.05), col=method))+geom_smooth(method="glm", method.args=list(family="binomial"))+
facet_wrap(vars(b))+
ylab("Proportion of Nulls Rejected")+
ylab("True Signal (estimated clusters)")+theme_bw()
ggplot(data=res %>% filter(j < 5),
aes(x=abs(truesig), y = as.numeric(pval < 0.05), col=method))+geom_smooth(method="glm", method.args=list(family="binomial"))+
facet_wrap(vars(b))+
ylab("Proportion of Nulls Rejected")+
ylab("True Signal (estimated clusters)")+theme_bw()
ggplot(data=res %>% filter(j < 5),
aes(x=abs(truesig), y = as.numeric(pval < 0.05), col=method2))+geom_smooth(method="glm", method.args=list(family="binomial"))+
facet_wrap(vars(b2))+
ylab("Proportion of Nulls Rejected")+
ylab("True Signal (estimated clusters)")+theme_bw()
ggplot(data=res %>% filter(j ==1),
aes(x=abs(beta), y = abs(rand), col=method))+geom_smooth(method="glm", method.args=list(family="binomial"))+
facet_wrap(vars(b))+
ylab("Adjusted Rand Index")+
ylab("Beta")+theme_bw()
ggplot(data=res %>% filter(j ==1),
aes(x=abs(beta), y = abs(rand), col=method2))+geom_smooth(method="glm", method.args=list(family="binomial"))+
facet_wrap(vars(b2))+
ylab("Adjusted Rand Index")+
ylab("Beta")+theme_bw()
ggplot(data=res %>% filter(j ==1),
aes(x=abs(beta), y = abs(rand), col=method2))+geom_smooth(method="glm", method.args=list(family="binomial"))+
facet_wrap(vars(b2))+
ylab("Average Adjusted Rand Index")+
xlab("Beta")+theme_bw()
rhead(res %>% filter(method=="naive"))
head(res %>% filter(method=="naive"))
ggplot(data=null_res %>% filter(method != "cs", method != "naive"), aes(x=as.factor(method2), y=est_b_full))+geom_boxplot()+
facet_wrap(vars(b2), scales="free")+geom_hline(aes(yintercept=b), col="red")+
theme(axis.text.x=element_text(angle=90, size=12))+
scale_y_log10()+ggtitle("Under Global Null")+xlab("Method")+ylab("Estimated b")
setwd("~/countsplit/vignettes")
setwd("~/countsplit")
pkgdown::build_site(lazy=TRUE)
pkgdown::build_site(lazy=TRUE)
pkgdown::build_site(lazy=TRUE)
library(Seurat)
?DimHeatmap
pkgdown::build_site(lazy=TRUE)
pkgdown::build_site(lazy=TRUE)
library(Seurat)
library(countsplit)
library(ggplot2)
library(patchwork)
library(mclust)
data(pbmc.counts, package="countsplit")
rownames(pbmc.counts) <- sapply(rownames(pbmc.counts), function(u) stringr::str_replace_all(u, "_","-"))
set.seed(1)
split <- countsplit(pbmc.counts, epsilon=0.5)
Xtrain <- split$train
Xtest <- split$test
pbmc.train <- CreateSeuratObject(counts = Xtrain, min.cells = 3, min.features = 200)
pbmc.train <- CreateSeuratObject(counts = Xtrain, min.cells = 3, min.features = 200)
pbmc.train[["percent.mt"]] <- PercentageFeatureSet(pbmc.train, pattern = "^MT-")
pbmc.train <- subset(pbmc.train, subset = nFeature_RNA > 200 & nFeature_RNA < 2500 & percent.mt < 5)
pbmc[["percent.mt"]] <- PercentageFeatureSet(pbmc, pattern = "^MT-")
pbmc <- subset(pbmc, subset = nFeature_RNA > 200 & nFeature_RNA < 2500 & percent.mt < 5)
rows <- rownames(pbmc.train)
cols <- colnames(pbmc.train)
Xtestsubset <- Xtest[rows,cols]
dim(Xtestsubset)
pbmc.train <- NormalizeData(pbmc.train)
pbmc.train <- FindVariableFeatures(pbmc.train, selection.method = "vst", nfeatures = 2000)
pbmc <- NormalizeData(pbmc)
pbmc  <- FindVariableFeatures(pbmc, selection.method = "vst", nfeatures = 2000)
top10 <- head(VariableFeatures(pbmc), 10)
plot1 <- VariableFeaturePlot(pbmc) + ggtitle("pbmc")
plot2 <- LabelPoints(plot = plot1, points = top10)
top10.train <- head(VariableFeatures(pbmc.train), 10)
plot1.train <- VariableFeaturePlot(pbmc.train) + ggtitle("pbmc.train")
plot2.train <- LabelPoints(plot = plot1.train, points = top10.train)
plot2 + plot2.train & guides(col="none")
all.genes <- rownames(pbmc)
pbmc <- ScaleData(pbmc,features = all.genes)
pbmc <- RunPCA(pbmc, features = VariableFeatures(object = pbmc))
p1 <- VizDimLoadings(pbmc, dims = 1, reduction = "pca")+theme(axis.text = element_text(size=7))+ggtitle("pbmc")
p2 <- VizDimLoadings(pbmc, dims = 2, reduction = "pca")+theme(axis.text = element_text(size=7))
all.genes.train <- rownames(pbmc.train)
pbmc.train <- ScaleData(pbmc.train,features = all.genes.train)
pbmc.train <- RunPCA(pbmc.train, features = VariableFeatures(object = pbmc.train))
p1.train <- VizDimLoadings(pbmc.train, dims = 1, reduction = "pca")+theme(axis.text = element_text(size=7))+ggtitle("pbmc.train")
p2.train <- VizDimLoadings(pbmc.train, dims = 2, reduction = "pca")+theme(axis.text = element_text(size=7))
p1+p1.train+p2+p2.train+plot_layout(nrow=2, ncol=2)
pbmc <- FindNeighbors(pbmc, dims = 1:10)
pbmc <- FindClusters(pbmc, resolution=0.5)
pbmc.train <- FindNeighbors(pbmc.train, dims = 1:10)
pbmc.train <- FindClusters(pbmc.train, resolution=0.5)
pbmc.train <- RunUMAP(pbmc.train, dims = 1:10)
DimPlot(pbmc.train, reduction = "umap")
clusters.train <- Idents(pbmc.train)
clusters.full <- Idents(pbmc)
length(clusters.train)
length(clusters.full)
clusters.full.subset <- clusters.full[colnames(pbmc.train)]
adjustedRandIndex(clusters.train, clusters.full.subset)
DimHeatmap(pbmc.train, dims = 1:15, cells = 500, balanced = TRUE, nfeatures=10)DimHeatmap(pbmc.train, dims = 1:15, cells = 500, balanced = TRUE, nfeatures=10
DimHeatmap(pbmc.train, dims = 1:15, cells = 500, balanced = TRUE, nfeatures=10)DimHeatmap(pbmc.train, dims = 1:15, cells = 500, balanced = TRUE, nfeatures=10)
DimHeatmap(pbmc.train, dims = 1:15, cells = 500, balanced = TRUE, nfeatures=10)
DimHeatmap(pbmc.train, dims = 1:15, cells = 500, balanced = TRUE, nfeatures=1)
DimHeatmap(pbmc.train, dims = 1:15, cells = 500, balanced = TRUE, nfeatures=2)
DimHeatmap(pbmc.train, dims = 1:15, cells = 500, balanced = TRUE, nfeatures=3)
DimHeatmap(pbmc.train, dims = 1:15, cells = 500, balanced = TRUE, nfeatures=15)
pkgdown::build_site(lazy=TRUE)
pkgdown::build_site(lazy=TRUE)
pkgdown::build_site(lazy=TRUE)
devtools::document()
devtools::document()
devtools::document()
devtools::document()
pkgdown::build_site(lazy=TRUE)
pkgdown::build_site(lazy=TRUE)
library(countsplit)
data(cm)
class(cm)
data(pbmc.counts)
class(pbmc.count)
class(pbmc.counts)
pkgdown::build_site(lazy=TRUE)
devtools::document()
pkgdown::build_site(lazy=TRUE)
