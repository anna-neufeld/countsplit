[{"path":"/articles/countsplit_tutorial.html","id":"simple-example-on-simulated-data","dir":"Articles","previous_headings":"","what":"Simple example on simulated data","title":"Tutorial: differential expression analysis on single cell RNA-seq data","text":"get comfortable countsplit package, start working simple simulated datasets. analyses, first cluster cells using k-means clustering k=2, test differential expression using Poisson generalized linear models (GLMs). simple choices keep us needing external scRNA-seq packages.","code":""},{"path":"/articles/countsplit_tutorial.html","id":"simulated-data-with-no-true-signal-","dir":"Articles","previous_headings":"Simple example on simulated data","what":"Simulated data with no true signal.","title":"Tutorial: differential expression analysis on single cell RNA-seq data","text":"First suppose \\(n=1000\\) cells \\(p=200\\) genes. Suppose every count \\(\\textbf{X}_{ij}\\) drawn \\(\\text{Poisson}(5)\\) distribution. first generate data. Suppose interested studying differential expression across two clusters, obtained k-means clustering. First can see naive method control Type 1 error rate. example happens cluster data test differential expression using naive method: first line runs k-means \\(k=2\\) logged data (pseudocount 1) saves cluster assignments cell dataset asclusters.full. every column \\(X_j\\) \\(X\\), second line fits Poisson GLM \\(X_j\\) clusters.full saves summary slope coefficient results.naive. shown output, `results.naive printout, saved slope coefficient estimate, standard error, z-value, p-value every gene dataset. Even first 6 rows results, can see naive method assigns small p-values many genes, despite fact genes truly differentially expressed data. can make uniform QQ-plot p-values naive method see uniformly distributed thus control Type 1 error. p-values stored 4th column results.naive matrix.  now address issue using count splitting. key steps (1) running countsplit function get Xtrain Xtest (2) running analysis step Xtest response clusters obtained Xtrain latent variable. countsplit function returns list, call split , contains training set test set. run analysis steps , run clustering Xtrain use Xtest response regression. can already see summary output p-values first 6 genes much larger. make uniform QQ-plot , see p-values obtained count splitting uniformly distributed, global null genes differentially expressed cells expression counts drawn distribution.","code":"set.seed(1) n <- 1000 p <- 200 X <- matrix(rpois(n*p, lambda=5), nrow=n) clusters.full <- kmeans(log(X+1), centers=2)$cluster results.naive <- t(apply(X, 2, function(u) summary(glm(u~clusters.full, family=\"poisson\"))$coefficients[2,])) head(results.naive) ##         Estimate Std. Error   z value     Pr(>|z|) ## [1,]  0.03958456 0.02820810  1.403305 1.605260e-01 ## [2,] -0.10237171 0.02857552 -3.582497 3.403252e-04 ## [3,]  0.11308989 0.02849956  3.968127 7.243959e-05 ## [4,]  0.10833419 0.02828266  3.830410 1.279301e-04 ## [5,] -0.08088836 0.02823097 -2.865235 4.166997e-03 ## [6,]  0.04539730 0.02797837  1.622586 1.046780e-01 library(ggplot2) ggplot(data=NULL, aes(sample=results.naive[,4]))+geom_qq(distribution=\"qunif\")+geom_abline(col=\"red\") set.seed(2) split <- countsplit(X, epsilon=0.5) names(split) ## [1] \"train\" \"test\" Xtrain <- split$train Xtest <- split$test clusters.train <- kmeans(log(Xtrain+1), centers=2)$cluster results.countsplit <- t(apply(Xtest, 2, function(u) summary(glm(u~clusters.train, family=\"poisson\"))$coefficients[2,])) head(results.countsplit) ##          Estimate Std. Error    z value   Pr(>|z|) ## [1,]  0.028171056 0.03988386  0.7063272 0.47998469 ## [2,] -0.014424364 0.04075410 -0.3539365 0.72338648 ## [3,]  0.007947168 0.04093763  0.1941287 0.84607511 ## [4,]  0.024273036 0.04004166  0.6061945 0.54438561 ## [5,] -0.067879740 0.04045377 -1.6779582 0.09335526 ## [6,] -0.052881527 0.04004365 -1.3205971 0.18663572 ggplot(data=NULL, aes(sample=results.countsplit[,4]))+geom_qq(distribution=\"qunif\")+geom_abline(col=\"red\")"},{"path":"/articles/countsplit_tutorial.html","id":"simulated-data-with-true-signal","dir":"Articles","previous_headings":"Simple example on simulated data","what":"Simulated data with true signal","title":"Tutorial: differential expression analysis on single cell RNA-seq data","text":"now demonstrate performance count splitting simple simulated dataset contains two true clusters. first randomly assign cells one two true clusters. generate data \\(X_{ij} \\sim \\mathrm{Poisson}(\\Lambda_{ij})\\). Genes \\(1-10\\) differentially expressed– \\(j=1,\\ldots,10\\), \\(\\Lambda_{ij} = 5\\) cells cluster \\(0\\) \\(\\Lambda_{ij}=10\\) cells cluster \\(1\\). Genes \\(11-200\\) differentially expressed (\\(\\Lambda_{ij}=5\\) cells. ideal case, get see true cluster assignments use study differential expression. Let’s save slopes intercepts get ideal setting. Let’s compare get count split. axes compare. First, effect estimating \\(L\\) using training set ? full dataset, made 5 errors. training dataset, made 25 errors. make clustering worse! slightly!! Second, effect using Xtest rather X response regression? Let’s compare case see ideal clusters. plot shows get.","code":"set.seed(1) n <- 1000 p <- 200 clusters.true <- rbinom(n, size=1, prob=0.5) Lambda <- matrix(5, nrow=n, ncol=p) Lambda[clusters.true==1, 1:10] <- 10 X <-apply(Lambda,1:2,rpois,n=1) intercepts.ideal <- t(apply(X, 2, function(u) summary(glm(u~clusters.true, family=\"poisson\"))$coefficients[1,1])) slopes.ideal <- t(apply(X, 2, function(u) summary(glm(u~clusters.true, family=\"poisson\"))$coefficients[2,1])) set.seed(111) split <- countsplit(X, epsilon=0.5) Xtrain <- split$train Xtest <- split$test set.seed(222) clusters.full <- kmeans(log(X+1), centers=2)$cluster clusters.train <- kmeans(log(Xtrain+1), centers=2)$cluster table(clusters.true, clusters.full) ##              clusters.full ## clusters.true   1   2 ##             0 515   5 ##             1   0 480 table(clusters.train, clusters.full) ##               clusters.full ## clusters.train   1   2 ##              1 498   8 ##              2  17 477 intercepts.ideal <- t(apply(X, 2, function(u) summary(glm(u~clusters.true, family=\"poisson\"))$coefficients[1,1])) slopes.ideal <- t(apply(X, 2, function(u) summary(glm(u~clusters.true, family=\"poisson\"))$coefficients[2,1])) clusters.train <- kmeans(log(Xtrain+1), centers=2)$cluster intercepts.countsplit <- t(apply(Xtest, 2, function(u) summary(glm(u~clusters.train, family=\"poisson\"))$coefficients[1,1])) slopes.countsplit <- t(apply(Xtest, 2, function(u) summary(glm(u~clusters.train, family=\"poisson\"))$coefficients[2,1])) library(ggplot2) library(patchwork) p1 <- ggplot(data=NULL, aes(x=intercepts.ideal, y=intercepts.countsplit))+geom_point()+geom_abline(intercept= log(0.5), slope=1, col=\"red\") p2 <- ggplot(data=NULL, aes(x=slopes.ideal, y=slopes.countsplit))+geom_point()+geom_abline(intercept=0, slope=1, col=\"red\") p1 + p2"},{"path":"/authors.html","id":null,"dir":"","previous_headings":"","what":"Authors","title":"Authors and Citation","text":"Anna Neufeld. Author, maintainer.","code":""},{"path":"/authors.html","id":"citation","dir":"","previous_headings":"","what":"Citation","title":"Authors and Citation","text":"Neufeld (2022). countsplit: Implements count splitting methodology paper \"Inference latent variable estimation single cell RNA sequencing data\". R package version 0.0.0.9000, https://github.com/anna-neufeld/countsplit.","code":"@Manual{,   title = {countsplit: Implements the count splitting methodology from the paper \"Inference after latent variable estimation for single cell RNA sequencing data\"},   author = {Anna Neufeld},   year = {2022},   note = {R package version 0.0.0.9000},   url = {https://github.com/anna-neufeld/countsplit}, }"},{"path":"/index.html","id":"what-is-treevalues","dir":"","previous_headings":"","what":"What is treevalues?","title":"Implements the count splitting methodology from the paper ","text":"treevalues R package computes confidence intervals p-values mean response within region difference mean response two regions CART regression tree (built using package rpart). regions regression tree selected using data, naively “double dip” data inference means within regions. treevalues package implements selective inference approach conduct inference without double dipping data.","code":""},{"path":"/index.html","id":"how-can-i-get-treevalues","dir":"","previous_headings":"","what":"How can I get treevalues?","title":"Implements the count splitting methodology from the paper ","text":"Make sure remotes installed running install.packages(\"remotes\"), type","code":"remotes::install_github(\"anna-neufeld/treevalues\")"},{"path":"/index.html","id":"where-can-i-learn-more","dir":"","previous_headings":"","what":"Where can I learn more?","title":"Implements the count splitting methodology from the paper ","text":"See overview tab detailed motivation framework, tutorial tab instructions use package real data. See https://arxiv.org/abs/2106.07816 preprint describes selective inference methodology. See https://github.com/anna-neufeld/treevalues-simulations code reproduce experiments figures preprint.","code":""},{"path":"/reference/cm.html","id":null,"dir":"Reference","previous_headings":"","what":"Cardiomyocite data. — cm","title":"Cardiomyocite data. — cm","text":"dataset collected Elborany et al., 2021 used paper.","code":""},{"path":"/reference/cm.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Cardiomyocite data. — cm","text":"","code":"cm"},{"path":"/reference/cm.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"Cardiomyocite data. — cm","text":"RDS object.","code":""},{"path":[]},{"path":"/reference/cm.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Cardiomyocite data. — cm","text":"","code":"data(cm)"},{"path":"/reference/countsplit.html","id":null,"dir":"Reference","previous_headings":"","what":"Takes one matrix of counts and returns a list containing two matrices of counts: a training set and a test set. — countsplit","title":"Takes one matrix of counts and returns a list containing two matrices of counts: a training set and a test set. — countsplit","text":"sure see countsplitting tutorial vignette details use correctly existing single cell RNA-seq pipelines.","code":""},{"path":"/reference/countsplit.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Takes one matrix of counts and returns a list containing two matrices of counts: a training set and a test set. — countsplit","text":"","code":"countsplit(X, epsilon = 0.5)"},{"path":"/reference/countsplit.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Takes one matrix of counts and returns a list containing two matrices of counts: a training set and a test set. — countsplit","text":"X cell--gene matrix integer counts epsilon thinning parameter count splitting. Must 0 1.","code":""}]
