// Generated by using Rcpp::compileAttributes() -> do not edit by hand
// Generator token: 10BE3573-1514-4C36-9D1C-5A225CD40393

#include <Rcpp.h>

using namespace Rcpp;

#ifdef RCPP_USE_GLOBAL_ROSTREAM
Rcpp::Rostream<true>&  Rcpp::Rcout = Rcpp::Rcpp_cout_get();
Rcpp::Rostream<false>& Rcpp::Rcerr = Rcpp::Rcpp_cerr_get();
#endif

// rmultinom_1
Rcpp::IntegerVector rmultinom_1(int& size, Rcpp::NumericVector& probs);
RcppExport SEXP _countsplit_rmultinom_1(SEXP sizeSEXP, SEXP probsSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< int& >::type size(sizeSEXP);
    Rcpp::traits::input_parameter< Rcpp::NumericVector& >::type probs(probsSEXP);
    rcpp_result_gen = Rcpp::wrap(rmultinom_1(size, probs));
    return rcpp_result_gen;
END_RCPP
}
// dir_mul_sample_cpp
Rcpp::IntegerVector dir_mul_sample_cpp(int& size, int folds, double b);
RcppExport SEXP _countsplit_dir_mul_sample_cpp(SEXP sizeSEXP, SEXP foldsSEXP, SEXP bSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< int& >::type size(sizeSEXP);
    Rcpp::traits::input_parameter< int >::type folds(foldsSEXP);
    Rcpp::traits::input_parameter< double >::type b(bSEXP);
    rcpp_result_gen = Rcpp::wrap(dir_mul_sample_cpp(size, folds, b));
    return rcpp_result_gen;
END_RCPP
}
// beta_bin_sample_cpp
int beta_bin_sample_cpp(int& x, double eps, double b);
RcppExport SEXP _countsplit_beta_bin_sample_cpp(SEXP xSEXP, SEXP epsSEXP, SEXP bSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< int& >::type x(xSEXP);
    Rcpp::traits::input_parameter< double >::type eps(epsSEXP);
    Rcpp::traits::input_parameter< double >::type b(bSEXP);
    rcpp_result_gen = Rcpp::wrap(beta_bin_sample_cpp(x, eps, b));
    return rcpp_result_gen;
END_RCPP
}
// mapply_dir_mul_sample_cpp
Rcpp::IntegerMatrix mapply_dir_mul_sample_cpp(Rcpp::IntegerVector x, int folds, Rcpp::NumericVector overdisps);
RcppExport SEXP _countsplit_mapply_dir_mul_sample_cpp(SEXP xSEXP, SEXP foldsSEXP, SEXP overdispsSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::IntegerVector >::type x(xSEXP);
    Rcpp::traits::input_parameter< int >::type folds(foldsSEXP);
    Rcpp::traits::input_parameter< Rcpp::NumericVector >::type overdisps(overdispsSEXP);
    rcpp_result_gen = Rcpp::wrap(mapply_dir_mul_sample_cpp(x, folds, overdisps));
    return rcpp_result_gen;
END_RCPP
}
// mapply_dir_mul_slower
Rcpp::IntegerMatrix mapply_dir_mul_slower(Rcpp::IntegerVector x, Rcpp::NumericVector epsilon, Rcpp::NumericVector overdisps);
RcppExport SEXP _countsplit_mapply_dir_mul_slower(SEXP xSEXP, SEXP epsilonSEXP, SEXP overdispsSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::IntegerVector >::type x(xSEXP);
    Rcpp::traits::input_parameter< Rcpp::NumericVector >::type epsilon(epsilonSEXP);
    Rcpp::traits::input_parameter< Rcpp::NumericVector >::type overdisps(overdispsSEXP);
    rcpp_result_gen = Rcpp::wrap(mapply_dir_mul_slower(x, epsilon, overdisps));
    return rcpp_result_gen;
END_RCPP
}
// mapply_betabin_sample_cpp
Rcpp::IntegerMatrix mapply_betabin_sample_cpp(Rcpp::IntegerVector x, double eps1, Rcpp::NumericVector overdisps);
RcppExport SEXP _countsplit_mapply_betabin_sample_cpp(SEXP xSEXP, SEXP eps1SEXP, SEXP overdispsSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::IntegerVector >::type x(xSEXP);
    Rcpp::traits::input_parameter< double >::type eps1(eps1SEXP);
    Rcpp::traits::input_parameter< Rcpp::NumericVector >::type overdisps(overdispsSEXP);
    rcpp_result_gen = Rcpp::wrap(mapply_betabin_sample_cpp(x, eps1, overdisps));
    return rcpp_result_gen;
END_RCPP
}

static const R_CallMethodDef CallEntries[] = {
    {"_countsplit_rmultinom_1", (DL_FUNC) &_countsplit_rmultinom_1, 2},
    {"_countsplit_dir_mul_sample_cpp", (DL_FUNC) &_countsplit_dir_mul_sample_cpp, 3},
    {"_countsplit_beta_bin_sample_cpp", (DL_FUNC) &_countsplit_beta_bin_sample_cpp, 3},
    {"_countsplit_mapply_dir_mul_sample_cpp", (DL_FUNC) &_countsplit_mapply_dir_mul_sample_cpp, 3},
    {"_countsplit_mapply_dir_mul_slower", (DL_FUNC) &_countsplit_mapply_dir_mul_slower, 3},
    {"_countsplit_mapply_betabin_sample_cpp", (DL_FUNC) &_countsplit_mapply_betabin_sample_cpp, 3},
    {NULL, NULL, 0}
};

RcppExport void R_init_countsplit(DllInfo *dll) {
    R_registerRoutines(dll, NULL, CallEntries, NULL, NULL);
    R_useDynamicSymbols(dll, FALSE);
}
